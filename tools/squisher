#!/bin/sh
#
# Squish a CM otapackage for distribution
# cyanogen
#
. $ANDROID_BUILD_TOP/vendor/crom/tools/functions

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/crom/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"
DELETE_MEDIA="*.qmg"
DELETE_APKS="VideoEditor.apk PinyinIME.apk"
DELETE_PRIV_APKS="Launcher2.apk"
DELETE_FONTS="MTLmr3m.ttf"

REPACK=$OUT/repack.d
echo
echo -e $CL_CYN"Sanitizing Environment..."$CL_RST
rm -rf $REPACK
mkdir -p $REPACK
echo

# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
echo -e "Unpacking "$CL_CYN""$OTAPACKAGE""$CL_RST"..."
unzip $QUIET $OTAPACKAGE
echo

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
cp $REPACK/ota/system/framework/framework-res.apk .
cp $REPACK/ota/system/app/*.apk .
for f in $REPACK/ota/system/priv-app/*.apk; do
    cp $f ./priv-app-$(basename $f)
done

# Do optimization in parallel
find ./ -name \*.apk | $XARGS $OPTICHARGER

# Move optimized apks to repack directory
mv -f $REPACK/parallel/framework-res.apk $REPACK/ota/system/framework/framework-res.apk
for f in $REPACK/parallel/priv-app*.apk; do
    mv $f $REPACK/ota/system/priv-app/$(basename $f | cut -d'-' -f3)
done
mv -f $REPACK/parallel/*.apk $REPACK/ota/system/app/

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop

# Determine what to name the new signed package
MODVERSION=`sed -n -e'/ro\.crom\.version/s/^.*=//p' $OUT/system/build.prop`
TARGET_PRODUCT_FINAL=`echo $TARGET_PRODUCT | cut -d '_' -f2`
echo -e $CL_CYN"MODVERSION: $MODVERSION"$CL_RST
OUTFILE=$OUT/$MODVERSION-$TARGET_PRODUCT_FINAL.zip

# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# Delete unnecessary libraries
( cd $REPACK/ota/system/lib; echo $DELETE_LIBS | xargs rm -f; )

# Delete Offline charging mode files
( cd $REPACK/ota/system/media; echo $DELETE_MEDIA | xargs rm -f; )

if [ "$TARGET_PRODUCT_FINAL" != "galaxysmtd" ]
then
# No need for modem.bin
rm -f $REPACK/ota/modem.bin
fi

# No need for media/video
rm -rf $REPACK/ota/system/media/video

# Delete Unnecessary Fonts
( cd $REPACK/ota/system/fonts; echo $DELETE_FONTS | xargs rm -f; )

# No need for tts
rm -rf $REPACK/ota/system/tts

# No need for srec
rm -rf $REPACK/ota/system/usr/srec

# No need for recovery
rm -rf $REPACK/ota/recovery
rm -rf $REPACK/ota/system/etc/recovery-resource.dat

# Strip modules
#[ -d $REPACK/ota/system/lib/modules ] && \
#	find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Swap boot.img
PREBUILTKERNEL=$OUT/system/cromkernel/boot.img
if [ -e "$PREBUILTKERNEL" ];then
   rm -f $REPACK/ota/boot.img
   mv -f $REPACK/ota/system/cromkernel/boot.img $REPACK/ota/boot.img
fi

# Pack it up and sign
printf "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo
printf "Signing package..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
	-jar $OUT/../../../host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo
printf "Cleaning up..."
rm -rf $REPACK
echo

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5
ZIPSIZE=`ls -lah $OUTFILE | awk '{ print $5}' `

echo -e
echo -e $CL_BLU" *****************************************************" $CL_RST
echo -e $CL_YLW"     _____             _____                _____     " $CL_RST
echo -e $CL_YLW"  __|___  |__       __|__   |__  _____  ___|    _|__  " $CL_RST
echo -e $CL_YLW" |   ___|    | ___ |     |     |/     \|    \  /  | | " $CL_RST
echo -e $CL_YLW" |   |__     ||___||     \     ||     ||     \/   | | " $CL_RST
echo -e $CL_YLW" |______|  __|     |__|\__\  __|\_____/|__/\__/|__|_| " $CL_RST
echo -e $CL_YLW"    |_____|           |_____|              |_____|    " $CL_RST
echo -e $CL_BLU" *****************************************************" $CL_RST
echo -e
echo -e $CL_GRN"*================== C-RoM Build is done ===================*"$CL_RST
echo -e $CL_BLU"| Package complete"$CL_RST" : "$CL_CYN"$OUTFILE             "$CL_RST
echo -e $CL_YLW"| MD5":$CL_BLU" $(cat $img.md5 | awk '{ print $1 }')        "$CL_RST
echo -e $CL_BLU"| SIZE:"$CL_YLW" $ZIPSIZE                                   "$CL_RST
echo -e $CL_GRN"*======================== ENJOY! ==========================*"$CL_RST
echo -e
echo
)

exit 0
